{"version":3,"file":"mapboxlayer-legacy.js","sources":["../../node_modules/ol/obj.js","../../node_modules/ol/events.js","../../node_modules/ol/util.js","../../node_modules/ol/Disposable.js","../../node_modules/ol/functions.js","../../node_modules/ol/events/Event.js","../../node_modules/ol/events/Target.js","../../node_modules/ol/Observable.js","../../node_modules/ol/events/EventType.js","../../node_modules/ol/Object.js","../../node_modules/ol/layer/Property.js","../../node_modules/ol/AssertionError.js","../../node_modules/ol/math.js","../../node_modules/ol/layer/Layer.js","../../node_modules/ol/source/State.js","../../node_modules/ol/render/EventType.js","../../node_modules/ol/layer/Base.js","../../node_modules/ol/ObjectEventType.js","../../node_modules/ol/proj/Units.js","../../node_modules/ol/proj/Projection.js","../../node_modules/ol/proj/epsg3857.js","../../node_modules/ol/proj.js","../../node_modules/ol/proj/epsg4326.js","../../node_modules/ol/proj/projections.js","../../node_modules/ol/proj/transforms.js","../../src/MapBoxLayer.js"],"sourcesContent":["/**\n * @module ol/obj\n */\n\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {\n  var arguments$1 = arguments;\n\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments$1[i];\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n};\n\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n}\n\n\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport function getValues(object) {\n  var values = [];\n  for (var property in object) {\n    values.push(object[property]);\n  }\n  return values;\n}\n\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  var property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n\n//# sourceMappingURL=obj.js.map","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {ListenerFunction} listener\n * @property {import(\"./events/Target.js\").EventTargetLike} target\n * @property {string} type\n * @api\n */\n\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n\n/**\n * @param {EventsKey} listenerObj Listener object.\n * @return {ListenerFunction} Bound listener.\n */\nexport function bindListener(listenerObj) {\n  var boundListener = function(evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n\n\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {EventsKey|undefined} The matching listener object.\n */\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener &&\n        listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array<EventsKey>|undefined} Listeners.\n */\nexport function getListeners(target, type) {\n  var listenerMap = getListenerMap(target);\n  return listenerMap ? listenerMap[type] : undefined;\n}\n\n\n/**\n * Get the lookup of listeners.\n * @param {Object} target Target.\n * @param {boolean=} opt_create If a map should be created if it doesn't exist.\n * @return {!Object<string, Array<EventsKey>>} Map of\n *     listeners by event type.\n */\nfunction getListenerMap(target, opt_create) {\n  var listenerMap = target.ol_lm;\n  if (!listenerMap && opt_create) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n}\n\n\n/**\n * Remove the listener map from a target.\n * @param {Object} target Target.\n */\nfunction removeListenerMap(target) {\n  delete target.ol_lm;\n}\n\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n */\nfunction removeListeners(target, type) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      /** @type {import(\"./events/Target.js\").default} */ (target).\n        removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n    listeners.length = 0;\n    var listenerMap = getListenerMap(target);\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        removeListenerMap(target);\n      }\n    }\n  }\n}\n\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  var listenerMap = getListenerMap(target, true);\n  var listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  var listenerObj = findListener(listeners, listener, opt_this, false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {EventsKey} */ ({\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    });\n    /** @type {import(\"./events/Target.js\").default} */ (target).\n      addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\nexport function unlisten(target, type, listener, opt_this) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    var listenerObj = findListener(listeners, listener, opt_this, true);\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    /** @type {import(\"./events/Target.js\").default} */ (key.target).\n      removeEventListener(key.type, key.boundListener);\n    var listeners = getListeners(key.target, key.type);\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n    clear(key);\n  }\n}\n\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n */\nexport function unlistenAll(target) {\n  var listenerMap = getListenerMap(target);\n  if (listenerMap) {\n    for (var type in listenerMap) {\n      removeListeners(target, type);\n    }\n  }\n}\n\n//# sourceMappingURL=events.js.map","/**\n * @module ol/util\n */\n\n/**\n * @return {?} Any return.\n */\nexport function abstract() {\n  return /** @type {?} */ ((function() {\n    throw new Error('Unimplemented abstract method.');\n  })());\n}\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n *\n *     function ParentClass(a, b) { }\n *     ParentClass.prototype.foo = function(a) { }\n *\n *     function ChildClass(a, b, c) {\n *       // Call parent constructor\n *       ParentClass.call(this, a, b);\n *     }\n *     inherits(ChildClass, ParentClass);\n *\n *     var child = new ChildClass('a', 'b', 'see');\n *     child.foo(); // This works.\n *\n * @param {!Function} childCtor Child constructor.\n * @param {!Function} parentCtor Parent constructor.\n * @function module:ol.inherits\n * @deprecated\n * @api\n */\nexport function inherits(childCtor, parentCtor) {\n  childCtor.prototype = Object.create(parentCtor.prototype);\n  childCtor.prototype.constructor = childCtor;\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nvar uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @function module:ol.getUid\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport var VERSION = '5.3.3';\n\n//# sourceMappingURL=util.js.map","/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nvar Disposable = function Disposable() {\n  /**\n   * The object has already been disposed.\n   * @type {boolean}\n   * @private\n   */\n  this.disposed_ = false;\n};\n\n/**\n * Clean up.\n */\nDisposable.prototype.dispose = function dispose () {\n  if (!this.disposed_) {\n    this.disposed_ = true;\n    this.disposeInternal();\n  }\n};\n\n/**\n * Extension point for disposable objects.\n * @protected\n */\nDisposable.prototype.disposeInternal = function disposeInternal () {};\n\nexport default Disposable;\n\n//# sourceMappingURL=Disposable.js.map","/**\n * @module ol/functions\n */\n\n/**\n * Always returns true.\n * @returns {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @returns {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n//# sourceMappingURL=functions.js.map","/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nvar Event = function Event(type) {\n\n  /**\n   * @type {boolean}\n   */\n  this.propagationStopped;\n\n  /**\n   * The event type.\n   * @type {string}\n   * @api\n   */\n  this.type = type;\n\n  /**\n   * The event target.\n   * @type {Object}\n   * @api\n   */\n  this.target = null;\n};\n\n/**\n * Stop event propagation.\n * @api\n */\nEvent.prototype.preventDefault = function preventDefault () {\n  this.propagationStopped = true;\n};\n\n/**\n * Stop event propagation.\n * @api\n */\nEvent.prototype.stopPropagation = function stopPropagation () {\n  this.propagationStopped = true;\n};\n\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default Event;\n\n//# sourceMappingURL=Event.js.map","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport {unlistenAll} from '../events.js';\nimport {VOID} from '../functions.js';\nimport Event from './Event.js';\n\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nvar Target = /*@__PURE__*/(function (Disposable) {\n  function Target() {\n\n    Disposable.call(this);\n\n    /**\n     * @private\n     * @type {!Object<string, number>}\n     */\n    this.pendingRemovals_ = {};\n\n    /**\n     * @private\n     * @type {!Object<string, number>}\n     */\n    this.dispatching_ = {};\n\n    /**\n     * @private\n     * @type {!Object<string, Array<import(\"../events.js\").ListenerFunction>>}\n     */\n    this.listeners_ = {};\n\n  }\n\n  if ( Disposable ) Target.__proto__ = Disposable;\n  Target.prototype = Object.create( Disposable && Disposable.prototype );\n  Target.prototype.constructor = Target;\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").ListenerFunction} listener Listener.\n   */\n  Target.prototype.addEventListener = function addEventListener (type, listener) {\n    var listeners = this.listeners_[type];\n    if (!listeners) {\n      listeners = this.listeners_[type] = [];\n    }\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {{type: string,\n   *     target: (EventTargetLike|undefined),\n   *     propagationStopped: (boolean|undefined)}|\n   *     import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  Target.prototype.dispatchEvent = function dispatchEvent (event) {\n    var evt = typeof event === 'string' ? new Event(event) : event;\n    var type = evt.type;\n    evt.target = this;\n    var listeners = this.listeners_[type];\n    var propagate;\n    if (listeners) {\n      if (!(type in this.dispatching_)) {\n        this.dispatching_[type] = 0;\n        this.pendingRemovals_[type] = 0;\n      }\n      ++this.dispatching_[type];\n      for (var i = 0, ii = listeners.length; i < ii; ++i) {\n        if (listeners[i].call(this, evt) === false || evt.propagationStopped) {\n          propagate = false;\n          break;\n        }\n      }\n      --this.dispatching_[type];\n      if (this.dispatching_[type] === 0) {\n        var pendingRemovals = this.pendingRemovals_[type];\n        delete this.pendingRemovals_[type];\n        while (pendingRemovals--) {\n          this.removeEventListener(type, VOID);\n        }\n        delete this.dispatching_[type];\n      }\n      return propagate;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Target.prototype.disposeInternal = function disposeInternal () {\n    unlistenAll(this);\n  };\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").ListenerFunction>} Listeners.\n   */\n  Target.prototype.getListeners = function getListeners (type) {\n    return this.listeners_[type];\n  };\n\n  /**\n   * @param {string=} opt_type Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  Target.prototype.hasListener = function hasListener (opt_type) {\n    return opt_type ?\n      opt_type in this.listeners_ :\n      Object.keys(this.listeners_).length > 0;\n  };\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").ListenerFunction} listener Listener.\n   */\n  Target.prototype.removeEventListener = function removeEventListener (type, listener) {\n    var listeners = this.listeners_[type];\n    if (listeners) {\n      var index = listeners.indexOf(listener);\n      if (type in this.pendingRemovals_) {\n        // make listener a no-op, and remove later in #dispatchEvent()\n        listeners[index] = VOID;\n        ++this.pendingRemovals_[type];\n      } else {\n        listeners.splice(index, 1);\n        if (listeners.length === 0) {\n          delete this.listeners_[type];\n        }\n      }\n    }\n  };\n\n  return Target;\n}(Disposable));\n\n\nexport default Target;\n\n//# sourceMappingURL=Target.js.map","/**\n * @module ol/Observable\n */\nimport {listen, unlistenByKey, unlisten, listenOnce} from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nvar Observable = /*@__PURE__*/(function (EventTarget) {\n  function Observable() {\n\n    EventTarget.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n\n  }\n\n  if ( EventTarget ) Observable.__proto__ = EventTarget;\n  Observable.prototype = Object.create( EventTarget && EventTarget.prototype );\n  Observable.prototype.constructor = Observable;\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  Observable.prototype.changed = function changed () {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  Observable.prototype.getRevision = function getRevision () {\n    return this.revision_;\n  };\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.on = function on (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.once = function once (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  Observable.prototype.un = function un (type, listener) {\n    if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  return Observable;\n}(EventTarget));\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\n\nexport default Observable;\n\n//# sourceMappingURL=Observable.js.map","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~Event#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  ERROR: 'error',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  MOUSEDOWN: 'mousedown',\n  MOUSEMOVE: 'mousemove',\n  MOUSEOUT: 'mouseout',\n  MOUSEUP: 'mouseup',\n  MOUSEWHEEL: 'mousewheel',\n  MSPOINTERDOWN: 'MSPointerDown',\n  RESIZE: 'resize',\n  TOUCHSTART: 'touchstart',\n  TOUCHMOVE: 'touchmove',\n  TOUCHEND: 'touchend',\n  WHEEL: 'wheel'\n};\n\n//# sourceMappingURL=EventType.js.map","/**\n * @module ol/Object\n */\nimport {getUid} from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {assign} from './obj.js';\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport var ObjectEvent = /*@__PURE__*/(function (Event) {\n  function ObjectEvent(type, key, oldValue) {\n    Event.call(this, type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n\n  }\n\n  if ( Event ) ObjectEvent.__proto__ = Event;\n  ObjectEvent.prototype = Object.create( Event && Event.prototype );\n  ObjectEvent.prototype.constructor = ObjectEvent;\n\n  return ObjectEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /*@__PURE__*/(function (Observable) {\n  function BaseObject(opt_values) {\n    Observable.call(this);\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object<string, *>}\n     */\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  if ( Observable ) BaseObject.__proto__ = Observable;\n  BaseObject.prototype = Object.create( Observable && Observable.prototype );\n  BaseObject.prototype.constructor = BaseObject;\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  BaseObject.prototype.get = function get (key) {\n    var value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  };\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  BaseObject.prototype.getKeys = function getKeys () {\n    return Object.keys(this.values_);\n  };\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  BaseObject.prototype.getProperties = function getProperties () {\n    return assign({}, this.values_);\n  };\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  BaseObject.prototype.notify = function notify (key, oldValue) {\n    var eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.set = function set (key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      var oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.setProperties = function setProperties (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.unset = function unset (key, opt_silent) {\n    if (key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable));\n\n\n/**\n * @type {Object<string, string>}\n */\nvar changeEventTypeCache = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ?\n    changeEventTypeCache[key] :\n    (changeEventTypeCache[key] = 'change:' + key);\n}\n\n\nexport default BaseObject;\n\n//# sourceMappingURL=Object.js.map","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  SOURCE: 'source'\n};\n\n//# sourceMappingURL=Property.js.map","/**\n * @module ol/AssertionError\n */\nimport {VERSION} from './util.js';\n\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nvar AssertionError = /*@__PURE__*/(function (Error) {\n  function AssertionError(code) {\n    var path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\n    var message = 'Assertion failed. See https://openlayers.org/en/' + path +\n    '/doc/errors/#' + code + ' for details.';\n\n    Error.call(this, message);\n\n    /**\n     * Error code. The meaning of the code can be found on\n     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n     * the version found in the OpenLayers script's header comment if a version\n     * other than the latest is used).\n     * @type {number}\n     * @api\n     */\n    this.code = code;\n\n    /**\n     * @type {string}\n     */\n    this.name = 'AssertionError';\n\n    // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n    this.message = message;\n  }\n\n  if ( Error ) AssertionError.__proto__ = Error;\n  AssertionError.prototype = Object.create( Error && Error.prototype );\n  AssertionError.prototype.constructor = AssertionError;\n\n  return AssertionError;\n}(Error));\n\nexport default AssertionError;\n\n//# sourceMappingURL=AssertionError.js.map","/**\n * @module ol/math\n */\nimport {assert} from './asserts.js';\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = (function() {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function(x) {\n      var y = /** @type {Math} */ (Math).exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}());\n\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\nexport function roundUpToPowerOfTwo(x) {\n  assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n}\n\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  var n = mat.length;\n\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  var x = new Array(n);\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n//# sourceMappingURL=math.js.map","/**\n * @module ol/layer/Layer\n */\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getUid} from '../util.js';\nimport {getChangeEventType} from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Base.js\").default} layer\n * @property {number} opacity\n * @property {SourceState} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nvar Layer = /*@__PURE__*/(function (BaseLayer) {\n  function Layer(options) {\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    BaseLayer.call(this, baseOptions);\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this,\n      getChangeEventType(LayerProperty.SOURCE),\n      this.handleSourcePropertyChange_, this);\n\n    var source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  if ( BaseLayer ) Layer.__proto__ = BaseLayer;\n  Layer.prototype = Object.create( BaseLayer && BaseLayer.prototype );\n  Layer.prototype.constructor = Layer;\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayersArray = function getLayersArray (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n\n  /**\n   * Get the layer source.\n   * @return {import(\"../source/Source.js\").default} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  Layer.prototype.getSource = function getSource () {\n    var source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {import(\"../source/Source.js\").default} */ (source) || null\n    );\n  };\n\n  /**\n    * @inheritDoc\n    */\n  Layer.prototype.getSourceState = function getSourceState () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourceChange_ = function handleSourceChange_ () {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_ () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    var source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source,\n        EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  Layer.prototype.setMap = function setMap (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {\n        var renderEvent = /** @type {import(\"../render/Event.js\").default} */ (evt);\n        var layerState = this.getLayerState();\n        layerState.managed = false;\n        if (this.getZIndex() === undefined) {\n          layerState.zIndex = Infinity;\n        }\n        renderEvent.frameState.layerStatesArray.push(layerState);\n        renderEvent.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the layer source.\n   * @param {import(\"../source/Source.js\").default} source The layer source.\n   * @observable\n   * @api\n   */\n  Layer.prototype.setSource = function setSource (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n\n  return Layer;\n}(BaseLayer));\n\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution &&\n      resolution < layerState.maxResolution;\n}\n\n\nexport default Layer;\n\n//# sourceMappingURL=Layer.js.map","/**\n * @module ol/source/State\n */\n\n/**\n * @enum {string}\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\nexport default {\n  UNDEFINED: 'undefined',\n  LOADING: 'loading',\n  READY: 'ready',\n  ERROR: 'error'\n};\n\n//# sourceMappingURL=State.js.map","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n  /**\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n  /**\n   * @event module:ol/render/Event~RenderEvent#render\n   * @api\n   */\n  RENDER: 'render',\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete'\n};\n\n//# sourceMappingURL=EventType.js.map","/**\n * @module ol/layer/Base\n */\nimport {abstract} from '../util.js';\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {clamp} from '../math.js';\nimport {assign} from '../obj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = /*@__PURE__*/(function (BaseObject) {\n  function BaseLayer(options) {\n\n    BaseObject.call(this);\n\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = assign({}, options);\n    properties[LayerProperty.OPACITY] =\n       options.opacity !== undefined ? options.opacity : 1;\n    properties[LayerProperty.VISIBLE] =\n       options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n       options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n       options.minResolution !== undefined ? options.minResolution : 0;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n\n    /**\n     * The layer type.\n     * @type {import(\"../LayerType.js\").default}\n     * @protected;\n     */\n    this.type;\n\n  }\n\n  if ( BaseObject ) BaseLayer.__proto__ = BaseObject;\n  BaseLayer.prototype = Object.create( BaseObject && BaseObject.prototype );\n  BaseLayer.prototype.constructor = BaseLayer;\n\n  /**\n   * Get the layer type (used when creating a layer renderer).\n   * @return {import(\"../LayerType.js\").default} The layer type.\n   */\n  BaseLayer.prototype.getType = function getType () {\n    return this.type;\n  };\n\n  /**\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  BaseLayer.prototype.getLayerState = function getLayerState () {\n    /** @type {import(\"./Layer.js\").State} */\n    var state = this.state_ || /** @type {?} */ ({\n      layer: this,\n      managed: true\n    });\n    state.opacity = clamp(this.getOpacity(), 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = this.getZIndex() || 0;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    this.state_ = state;\n\n    return state;\n  };\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  BaseLayer.prototype.getLayersArray = function getLayersArray (opt_array) {\n    return abstract();\n  };\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  BaseLayer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {\n    return abstract();\n  };\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getExtent = function getExtent () {\n    return (\n      /** @type {import(\"../extent.js\").Extent|undefined} */ (this.get(LayerProperty.EXTENT))\n    );\n  };\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMaxResolution = function getMaxResolution () {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  };\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMinResolution = function getMinResolution () {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  };\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getOpacity = function getOpacity () {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  };\n\n  /**\n   * @abstract\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  BaseLayer.prototype.getSourceState = function getSourceState () {\n    return abstract();\n  };\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getVisible = function getVisible () {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  };\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getZIndex = function getZIndex () {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  };\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setExtent = function setExtent (extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  };\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMaxResolution = function setMaxResolution (maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  };\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMinResolution = function setMinResolution (minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  };\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setOpacity = function setOpacity (opacity) {\n    this.set(LayerProperty.OPACITY, opacity);\n  };\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setVisible = function setVisible (visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  };\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setZIndex = function setZIndex (zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  };\n\n  return BaseLayer;\n}(BaseObject));\n\n\nexport default BaseLayer;\n\n//# sourceMappingURL=Base.js.map","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange'\n};\n\n//# sourceMappingURL=ObjectEventType.js.map","/**\n * @module ol/proj/Units\n */\n\n/**\n * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or\n * `'us-ft'`.\n * @enum {string}\n */\nvar Units = {\n  DEGREES: 'degrees',\n  FEET: 'ft',\n  METERS: 'm',\n  PIXELS: 'pixels',\n  TILE_PIXELS: 'tile-pixels',\n  USFEET: 'us-ft'\n};\n\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {Object<Units, number>}\n * @api\n */\nexport var METERS_PER_UNIT = {};\n// use the radius of the Normal sphere\nMETERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;\nMETERS_PER_UNIT[Units.FEET] = 0.3048;\nMETERS_PER_UNIT[Units.METERS] = 1;\nMETERS_PER_UNIT[Units.USFEET] = 1200 / 3937;\n\nexport default Units;\n\n//# sourceMappingURL=Units.js.map","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `{number}` view resolution and an `{import(\"../coordinate.js\").Coordinate}` as arguments, and returns\n * the `{number}` resolution at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj#getPointResolution} function will be used.\n */\n\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj~get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4~register} function.\n *\n * @api\n */\nvar Projection = function Projection(options) {\n  /**\n   * @private\n   * @type {string}\n   */\n  this.code_ = options.code;\n\n  /**\n   * Units of projected coordinates. When set to `TILE_PIXELS`, a\n   * `this.extent_` and `this.worldExtent_` must be configured properly for each\n   * tile.\n   * @private\n   * @type {import(\"./Units.js\").default}\n   */\n  this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n\n  /**\n   * Validity extent of the projection in projected coordinates. For projections\n   * with `TILE_PIXELS` units, this is the extent of the tile in\n   * tile pixel space.\n   * @private\n   * @type {import(\"../extent.js\").Extent}\n   */\n  this.extent_ = options.extent !== undefined ? options.extent : null;\n\n  /**\n   * Extent of the world in EPSG:4326. For projections with\n   * `TILE_PIXELS` units, this is the extent of the tile in\n   * projected coordinate space.\n   * @private\n   * @type {import(\"../extent.js\").Extent}\n   */\n  this.worldExtent_ = options.worldExtent !== undefined ?\n    options.worldExtent : null;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.axisOrientation_ = options.axisOrientation !== undefined ?\n    options.axisOrientation : 'enu';\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.global_ = options.global !== undefined ? options.global : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.canWrapX_ = !!(this.global_ && this.extent_);\n\n  /**\n   * @private\n   * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n   */\n  this.getPointResolutionFunc_ = options.getPointResolution;\n\n  /**\n   * @private\n   * @type {import(\"../tilegrid/TileGrid.js\").default}\n   */\n  this.defaultTileGrid_ = null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.metersPerUnit_ = options.metersPerUnit;\n};\n\n/**\n * @return {boolean} The projection is suitable for wrapping the x-axis\n */\nProjection.prototype.canWrapX = function canWrapX () {\n  return this.canWrapX_;\n};\n\n/**\n * Get the code for this projection, e.g. 'EPSG:4326'.\n * @return {string} Code.\n * @api\n */\nProjection.prototype.getCode = function getCode () {\n  return this.code_;\n};\n\n/**\n * Get the validity extent for this projection.\n * @return {import(\"../extent.js\").Extent} Extent.\n * @api\n */\nProjection.prototype.getExtent = function getExtent () {\n  return this.extent_;\n};\n\n/**\n * Get the units of this projection.\n * @return {import(\"./Units.js\").default} Units.\n * @api\n */\nProjection.prototype.getUnits = function getUnits () {\n  return this.units_;\n};\n\n/**\n * Get the amount of meters per unit of this projection.If the projection is\n * not configured with `metersPerUnit` or a units identifier, the return is\n * `undefined`.\n * @return {number|undefined} Meters.\n * @api\n */\nProjection.prototype.getMetersPerUnit = function getMetersPerUnit () {\n  return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n};\n\n/**\n * Get the world extent for this projection.\n * @return {import(\"../extent.js\").Extent} Extent.\n * @api\n */\nProjection.prototype.getWorldExtent = function getWorldExtent () {\n  return this.worldExtent_;\n};\n\n/**\n * Get the axis orientation of this projection.\n * Example values are:\n * enu - the default easting, northing, elevation.\n * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n *   or south orientated transverse mercator.\n * wnu - westing, northing, up - some planetary coordinate systems have\n *   \"west positive\" coordinate systems\n * @return {string} Axis orientation.\n * @api\n */\nProjection.prototype.getAxisOrientation = function getAxisOrientation () {\n  return this.axisOrientation_;\n};\n\n/**\n * Is this projection a global projection which spans the whole world?\n * @return {boolean} Whether the projection is global.\n * @api\n */\nProjection.prototype.isGlobal = function isGlobal () {\n  return this.global_;\n};\n\n/**\n * Set if the projection is a global projection which spans the whole world\n * @param {boolean} global Whether the projection is global.\n * @api\n */\nProjection.prototype.setGlobal = function setGlobal (global) {\n  this.global_ = global;\n  this.canWrapX_ = !!(global && this.extent_);\n};\n\n/**\n * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n */\nProjection.prototype.getDefaultTileGrid = function getDefaultTileGrid () {\n  return this.defaultTileGrid_;\n};\n\n/**\n * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n */\nProjection.prototype.setDefaultTileGrid = function setDefaultTileGrid (tileGrid) {\n  this.defaultTileGrid_ = tileGrid;\n};\n\n/**\n * Set the validity extent for this projection.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @api\n */\nProjection.prototype.setExtent = function setExtent (extent) {\n  this.extent_ = extent;\n  this.canWrapX_ = !!(this.global_ && extent);\n};\n\n/**\n * Set the world extent for this projection.\n * @param {import(\"../extent.js\").Extent} worldExtent World extent\n *   [minlon, minlat, maxlon, maxlat].\n * @api\n */\nProjection.prototype.setWorldExtent = function setWorldExtent (worldExtent) {\n  this.worldExtent_ = worldExtent;\n};\n\n/**\n * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}\n * for this projection.\n * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n * @api\n */\nProjection.prototype.setGetPointResolution = function setGetPointResolution (func) {\n  this.getPointResolutionFunc_ = func;\n};\n\n/**\n * Get the custom point resolution function for this projection (if set).\n * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n * resolution function (if set).\n */\nProjection.prototype.getPointResolutionFunc = function getPointResolutionFunc () {\n  return this.getPointResolutionFunc_;\n};\n\nexport default Projection;\n\n//# sourceMappingURL=Projection.js.map","/**\n * @module ol/proj/epsg3857\n */\nimport {cosh} from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [\n  -HALF_SIZE, -HALF_SIZE,\n  HALF_SIZE, HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /*@__PURE__*/(function (Projection) {\n  function EPSG3857Projection(code) {\n    Projection.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n\n  }\n\n  if ( Projection ) EPSG3857Projection.__proto__ = Projection;\n  EPSG3857Projection.prototype = Object.create( Projection && Projection.prototype );\n  EPSG3857Projection.prototype.constructor = EPSG3857Projection;\n\n  return EPSG3857Projection;\n}(Projection));\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n      Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}\n\n//# sourceMappingURL=epsg3857.js.map","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport {getDistance} from './sphere.js';\nimport {applyTransform} from './extent.js';\nimport {modulo} from './math.js';\nimport {toEPSG4326, fromEPSG4326, PROJECTIONS as EPSG3857_PROJECTIONS} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport Projection from './proj/Projection.js';\nimport Units, {METERS_PER_UNIT} from './proj/Units.js';\nimport * as projections from './proj/projections.js';\nimport {add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc} from './proj/transforms.js';\n\n\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  var output;\n  if (opt_output !== undefined) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  projections.add(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ?\n    projections.get(/** @type {string} */ (projectionLike)) :\n    (/** @type {Projection} */ (projectionLike) || null);\n}\n\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {Units=} opt_units Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  var pointResolution;\n  var getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n  } else {\n    var units = projection.getUnits();\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      var toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));\n      var vertices = [\n        point[0] - resolution / 2, point[1],\n        point[0] + resolution / 2, point[1],\n        point[0], point[1] - resolution / 2,\n        point[0], point[1] + resolution / 2\n      ];\n      vertices = toEPSG4326(vertices, vertices, 2);\n      var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n      var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n      pointResolution = (width + height) / 2;\n      var metersPerUnit = opt_units ?\n        METERS_PER_UNIT[opt_units] :\n        projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function(source) {\n    projections.forEach(function(destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function(projection1) {\n    projections2.forEach(function(projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  projections.clear();\n  clearTransformFuncs();\n}\n\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return (\n      /** @type {Projection} */ (projection)\n    );\n  }\n}\n\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>=} opt_output Output.\n     * @param {number=} opt_dimension Dimension.\n     * @return {Array<number>} Output.\n     */\n    function(input, opt_output, opt_dimension) {\n      var length = input.length;\n      var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      var output = opt_output !== undefined ? opt_output : new Array(length);\n      for (var i = 0; i < length; i += dimension) {\n        var point = coordTransform([input[i], input[i + 1]]);\n        output[i] = point[0];\n        output[i + 1] = point[1];\n        for (var j = dimension - 1; j >= 2; --j) {\n          output[i + j] = input[i + j];\n        }\n      }\n      return output;\n    });\n}\n\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  var sourceProj = get(source);\n  var destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike=} opt_projection Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  return transform(coordinate, 'EPSG:4326',\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike=} opt_projection Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  var lonLat = transform(coordinate,\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n  var lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  var equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    var transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  var sourceCode = sourceProjection.getCode();\n  var destinationCode = destinationProjection.getCode();\n  var transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  var sourceProjection = get(source);\n  var destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj~transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc);\n}\n\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\n\naddCommon();\n\n//# sourceMappingURL=proj.js.map","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-180, -90, 180, 90];\n\n\n/**\n * @const\n * @type {number}\n */\nexport var METERS_PER_UNIT = Math.PI * RADIUS / 180;\n\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nvar EPSG4326Projection = /*@__PURE__*/(function (Projection) {\n  function EPSG4326Projection(code, opt_axisOrientation) {\n    Projection.call(this, {\n      code: code,\n      units: Units.DEGREES,\n      extent: EXTENT,\n      axisOrientation: opt_axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT\n    });\n\n  }\n\n  if ( Projection ) EPSG4326Projection.__proto__ = Projection;\n  EPSG4326Projection.prototype = Object.create( Projection && Projection.prototype );\n  EPSG4326Projection.prototype.constructor = EPSG4326Projection;\n\n  return EPSG4326Projection;\n}(Projection));\n\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')\n];\n\n//# sourceMappingURL=epsg4326.js.map","/**\n * @module ol/proj/projections\n */\n\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n  return cache[code] || null;\n}\n\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n\n//# sourceMappingURL=projections.js.map","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  var transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n\n//# sourceMappingURL=transforms.js.map","import Layer from 'ol/layer/Layer'\nimport {toDegrees} from 'ol/math';\nimport {toLonLat} from 'ol/proj.js';\n\nimport mapboxgl from 'mapbox-gl';\nimport Observable from 'ol/Observable';\n\n\nexport class MapBoxLayerRenderer extends Observable {\n\n  /**\n   * @param {MapBoxLayer} layer\n   */\n  constructor(layer) {\n    super();\n    this.layer = layer;\n  }\n\n  /**\n   * Determine if this renderer handles the provided layer.\n   * @param {import(\"ol/layer/Layer.js\").default} layer The candidate layer.\n   * @return {boolean} The renderer can render the layer.\n   */\n  static handles(layer) {\n    return layer instanceof MapBoxLayer;\n  }\n\n  /**\n   * Create a layer renderer.\n   * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n   * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n   * @return {CanvasImageLayerRenderer} The layer renderer.\n   */\n  static create(mapRenderer, layer) {\n    return new MapBoxLayerRenderer(/** @type {MapBoxLayer} */ (layer));\n  }\n\n  /**\n   * @param {import('ol/PluggableMap.js').FrameState} frameState\n   */\n  prepareFrame(frameState) {\n    const layer = this.layer;\n    const mapboxMap = this.layer.mapboxMap;\n    const canvas = mapboxMap.getCanvas();\n    const viewState = frameState.viewState;\n\n    const visible = layer.getVisible();\n    canvas.style.display = visible ? 'block' : 'none';\n\n    const opacity = layer.getOpacity().toString();\n    if (opacity !== canvas.style.opacity) {\n      canvas.style.opacity = opacity;\n    }\n\n    // adjust view parameters in mapbox\n    const rotation = viewState.rotation;\n    if (rotation) {\n      mapboxMap.rotateTo(toDegrees(-rotation), {\n        animate: false\n      });\n    }\n    mapboxMap.jumpTo({\n      center: toLonLat(viewState.center),\n      zoom: viewState.zoom - 1,\n      animate: false\n    });\n\n    // cancel the scheduled update & trigger synchronous redraw\n    // see https://github.com/mapbox/mapbox-gl-js/issues/7893#issue-408992184\n    // NOTE: THIS MIGHT BREAK WHEN UPDATING MAPBOX\n    if (mapboxMap._frame) {\n      mapboxMap._frame.cancel();\n      mapboxMap._frame = null;\n    }\n    mapboxMap._render();\n\n    return false; // never call compose\n  }\n}\n\nexport default class MapBoxLayer extends Layer {\n\n  constructor(options) {\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.accessToken;\n    delete baseOptions.style;\n    delete baseOptions.container;\n    super(baseOptions);\n\n    if (options.accessToken) {\n      mapboxgl.accessToken = options.accessToken;\n    }\n\n    this.mapboxMap = new mapboxgl.Map({\n      container: options.container,\n      style: options.style,\n      attributionControl: false,\n      boxZoom: false,\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false\n    });\n  }\n\n  getSourceState() {\n    return 'ready';\n  }\n\n  /**\n   * @param {string} name\n   * @param {boolean} visible\n   */\n  setLayerVisibility(name, visible) {\n    this.mapboxMap.setLayoutProperty(name, 'visibility', visible ? 'visible' : 'none');\n  }\n}\n"],"names":["assign","Object","target","var_sources","arguments$1","arguments","TypeError","output","i","ii","length","source","key","hasOwnProperty","clear","object","property","findListener","listeners","listener","opt_this","opt_setDeleteIndex","listenerObj","bindTo","deleteIndex","getListeners","type","listenerMap","getListenerMap","undefined","opt_create","ol_lm","removeListeners","removeEventListener","boundListener","keys","removeListenerMap","listen","opt_once","callOnce","addEventListener","evt","unlistenByKey","call","bindListener","push","listenOnce","unlisten","indexOf","splice","abstract","Error","uidCounter_","getUid","obj","ol_uid","String","Disposable","this","disposed_","VOID","prototype","dispose","disposeInternal","Event","preventDefault","propagationStopped","stopPropagation","Observable","EventTarget","revision_","__proto__","create","constructor","changed","dispatchEvent","getRevision","on","Array","isArray","len","once","un","Target","pendingRemovals_","dispatching_","listeners_","event","propagate","pendingRemovals","unlistenAll","hasListener","opt_type","index","ObjectEvent","oldValue","changeEventTypeCache","getChangeEventType","OPACITY","VISIBLE","EXTENT","Z_INDEX","MAX_RESOLUTION","MIN_RESOLUTION","SOURCE","cosh","Math","x","y","exp","Layer","BaseLayer","options","baseOptions","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","map","setMap","LayerProperty","handleSourcePropertyChange_","setSource","getLayersArray","opt_array","array","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getSourceState","getState","handleSourceChange_","renderEvent","layerState","managed","getZIndex","zIndex","Infinity","frameState","layerStatesArray","layerStates","render","set","BaseObject","properties","opacity","visible","maxResolution","minResolution","setProperties","state_","getType","value","state","layer","getOpacity","min","max","sourceState","getVisible","extent","getExtent","getMaxResolution","getMinResolution","setExtent","setMaxResolution","setMinResolution","setOpacity","setVisible","setZIndex","zindex","opt_values","values_","getKeys","getProperties","notify","eventType","opt_silent","values","unset","Units","DEGREES","FEET","METERS","PIXELS","TILE_PIXELS","USFEET","METERS_PER_UNIT","PI","Projection","code_","code","units_","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","canWrapX","getCode","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","projections2","forwardTransform","inverseTransform","RADIUS","HALF_SIZE","WORLD_EXTENT","EPSG3857Projection","units","resolution","point","PROJECTIONS","EPSG4326Projection","opt_axisOrientation","cache","transforms","add","destination","transformFn","sourceCode","destinationCode","cloneTransform","input","opt_output","opt_dimension","slice","identityTransform","addProjection","projection","projections.add","addTransformFunc","projectionLike","addEquivalentProjections","projections","forEach","addProjections","EPSG3857_PROJECTIONS","EPSG4326_PROJECTIONS","dimension","halfSize","log","tan","atan","projection1","projection2","MapBoxLayerRenderer","handles","MapBoxLayer","mapRenderer","prepareFrame","mapboxMap","canvas","getCanvas","viewState","style","display","toString","coordinate","r","lonLat","lon","rotation","rotateTo","animate","jumpTo","center","sourceProjection","destinationProjection","transform","transformFunc","getTransformFromProjections","opt_projection","zoom","_frame","cancel","_render","accessToken","container","mapboxgl","Map","attributionControl","boxZoom","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","setLayerVisibility","name","setLayoutProperty"],"mappings":"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"}